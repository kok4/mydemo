package internal

// Code generated by gen. Do not edit!
// 代码由 gen 生成。不要手工编辑！

import (
	"roomserver/gen/gensvr/proc"
	"usercmd"

	"zeus/net/server"

	assert "github.com/aurelien-rainone/assertgo"
)

// Wrapper 是 Proc 的封装。
// Proc 由用户实现，其 MsgProc_MyMsg(msg *pb.MyMsg) 中的参数是具体的消息类。
// 封装后为 MsgProc_MyMsg(msg IMsg), 这个接口才能注册到服务器。
type Wrapper_wilds struct {
	proc *proc.Proc_wilds
}

// CloneAndRegisterMsgProcFunctions 克隆自身并注册消息处理函数.
func (w *Wrapper_wilds) CloneAndRegisterMsgProcFunctions(sess server.ISession) {
	assert.True(sess != nil, "session is nil")
	result := &Wrapper_wilds{
		proc: proc.NewProc_wilds(sess),
	}

	sess.RegMsgProcFunc(1001, result.MsgProc_MsgLogin)
	sess.RegMsgProcFunc(1006, result.MsgProc_MsgMove)
	sess.RegMsgProcFunc(1007, result.MsgProc_MsgRun)
	sess.RegMsgProcFunc(1009, result.MsgProc_MsgRelife)
	sess.RegMsgProcFunc(1016, result.MsgProc_ClientHeartBeat)
	sess.RegMsgProcFunc(1020, result.MsgProc_MsgSceneChat)
	sess.RegMsgProcFunc(1050, result.MsgProc_MsgCastSkill)

	sess.AddOnClosed(result.proc.OnClosed)
}

func (w *Wrapper_wilds) MsgProc_MsgLogin(msg server.IMsg) {
	w.proc.MsgProc_MsgLogin(msg.(*usercmd.MsgLogin))
}

func (w *Wrapper_wilds) MsgProc_MsgMove(msg server.IMsg) {
	w.proc.MsgProc_MsgMove(msg.(*usercmd.MsgMove))
}

func (w *Wrapper_wilds) MsgProc_MsgRun(msg server.IMsg) {
	w.proc.MsgProc_MsgRun(msg.(*usercmd.MsgRun))
}

func (w *Wrapper_wilds) MsgProc_MsgRelife(msg server.IMsg) {
	w.proc.MsgProc_MsgRelife(msg.(*usercmd.MsgRelife))
}

func (w *Wrapper_wilds) MsgProc_ClientHeartBeat(msg server.IMsg) {
	w.proc.MsgProc_ClientHeartBeat(msg.(*usercmd.ClientHeartBeat))
}

func (w *Wrapper_wilds) MsgProc_MsgSceneChat(msg server.IMsg) {
	w.proc.MsgProc_MsgSceneChat(msg.(*usercmd.MsgSceneChat))
}

func (w *Wrapper_wilds) MsgProc_MsgCastSkill(msg server.IMsg) {
	w.proc.MsgProc_MsgCastSkill(msg.(*usercmd.MsgCastSkill))
}
