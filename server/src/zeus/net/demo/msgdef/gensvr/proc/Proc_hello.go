package proc

// Code generated by gen.
// 本文件是对应 hello 的处理器实现文件。
// 框架代码由 gen 生成，具体实现需要手工填写。
// 再次生成时会合并原有实现。

import (
	"fmt"
	"zeus/net/demo/proto/test"

	"zeus/net/server"
)

// Proc_hello 是消息处理类(Processor).
// 必须实现 NewProc_hello(), OnClosed() 和 MsgProc_*() 接口。
type Proc_hello struct {
	sess server.ISession // 一般都需要包含session对象

	// 可能还应该包含用户和房间对象
	// user *User
	// room *Room
}

func NewProc_hello(sess server.ISession) *Proc_hello {
	return &Proc_hello{
		sess: sess,
		// user, room 暂时为空，待创建
	}
}

func (p *Proc_hello) OnClosed() {
	// 会话断开时动作...
}

func (p *Proc_hello) MsgProc_SayRequest(msg *test.SayRequest) {
	fmt.Println("Got test request: ", msg)
	resp := &test.SayResponse{
		Data:   msg.Data,
		Result: "this is response",
	}
	p.sess.Send(resp)
}
