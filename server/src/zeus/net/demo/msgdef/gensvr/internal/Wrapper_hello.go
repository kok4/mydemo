package internal

// Code generated by gen. Do not edit!
// 代码由 gen 生成。不要手工编辑！

import (
	"zeus/net/demo/msgdef/gensvr/proc"
	"zeus/net/demo/proto/test"

	"zeus/net/server"

	assert "github.com/aurelien-rainone/assertgo"
)

// Wrapper 是 Proc 的封装。
// Proc 由用户实现，其 MsgProc_MyMsg(msg *pb.MyMsg) 中的参数是具体的消息类。
// 封装后为 MsgProc_MyMsg(msg IMsg), 这个接口才能注册到服务器。
type Wrapper_hello struct {
	proc *proc.Proc_hello
}

// CloneAndRegisterMsgProcFunctions 克隆自身并注册消息处理函数.
func (w *Wrapper_hello) CloneAndRegisterMsgProcFunctions(sess server.ISession) {
	assert.True(sess != nil, "session is nil")
	result := &Wrapper_hello{
		proc: proc.NewProc_hello(sess),
	}

	sess.RegMsgProcFunc(11001, result.MsgProc_SayRequest)

	sess.AddOnClosed(result.proc.OnClosed)
}

func (w *Wrapper_hello) MsgProc_SayRequest(msg server.IMsg) {
	w.proc.MsgProc_SayRequest(msg.(*test.SayRequest))
}
