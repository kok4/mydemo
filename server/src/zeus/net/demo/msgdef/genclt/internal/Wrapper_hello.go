package internal

// Code generated by gen. Do not edit!
// 代码由 gen 生成。不要手工编辑！

import (
	"zeus/net/demo/proto/test"

	"zeus/net/client"

	assert "github.com/aurelien-rainone/assertgo"
)

type IProc_hello interface {
	MsgProc_SayResponse(msg *test.SayResponse)
}

// Wrapper 是 Proc 的封装。
// Proc 由用户实现，其 MsgProc_MyMsg(msg *pb.MyMsg) 中的参数是具体的消息类。
// 封装后为 MsgProc_MyMsg(msg IMsg), 这个接口才能注册到服务器。
type Wrapper_hello struct {
	proc IProc_hello
}

func RegProc_hello(sess _IRegMsgProcFunc, proc IProc_hello) {
	assert.True(sess != nil, "session is nil")
	assert.True(proc != nil, "proc is nil")
	w := &Wrapper_hello{
		proc: proc,
	}

	// [ServerToClient] 注册接收的消息。需要从ID创建消息。
	sess.RegMsgProcFunc(11002, w.New_SayResponse, w.MsgProc_SayResponse)
}

func (w *Wrapper_hello) New_SayResponse() client.IMsg {
	return &test.SayResponse{}
}

func (w *Wrapper_hello) MsgProc_SayResponse(msg client.IMsg) {
	w.proc.MsgProc_SayResponse(msg.(*test.SayResponse))
}
