package server

/*
替换字符串
	SERVER_NAME:
	INTERFACE_FUNCTIONS
	REGISTER_FUNCTIONS
末尾增加函数
*/
var TMPL_Wrap = `// Code generated by msgen.
package server

import (
"pb"
"zeus/net/server"
assert "github.com/aurelien-rainone/assertgo"
)

type ISERVER_NAME_MsgProc interface {
	Clone(server.ISession) ISERVER_NAME_MsgProc
	INTERFACE_FUNCTIONS
}

// MsgProcWrapper 是 MsgProc 的封装。
// MsgProc 由用户实现，其 MsgProc_MyMsg(msg *pb.MyMsg) 中的参数是具体的消息类。
// 封装后为 MsgProc_MyMsg(msg IMsg), 这个接口才能注册到服务器。
type tSERVER_NAME_MsgProcWrapper struct {
	msgProc ISERVER_NAME_MsgProc
}

// MsgProc接口，可用来创建新的实例
var ins_SERVER_NAME_MsgProc ISERVER_NAME_MsgProc

func Set_SERVER_NAME_MsgProc(ins ISERVER_NAME_MsgProc) {
	assert.True(ins != nil, "MspProc instance is nil")
	assert.True(ins_SERVER_NAME_MsgProc == nil, "already set")
	ins_SERVER_NAME_MsgProc = ins
}

func (t *tSERVER_NAME_MsgProcWrapper) CloneAndRegisterMsgProcFunctions(sess server.ISession) {
	assert.True(sess != nil, "session is nil")
	assert.True(ins_SERVER_NAME_MsgProc != nil, "not initialized")
	result := &tSERVER_NAME_MsgProcWrapper{
		msgProc: ins_SERVER_NAME_MsgProc.Clone(sess),
	}
	REGISTER_FUNCTIONS
}
`
