package internal

// 需末尾增加函数
const kTemplateWrap = `
package internal

// Code generated by gen. Do not edit!
// 代码由 gen 生成。不要手工编辑！

import (
	"${CURRENT_IMPORT_DIR}gensvr/proc"
	${C2S_MSG_IMPORTS}
	"zeus/net/server"

	assert "github.com/aurelien-rainone/assertgo"
)

// Wrapper 是 Proc 的封装。
// Proc 由用户实现，其 MsgProc_MyMsg(msg *pb.MyMsg) 中的参数是具体的消息类。
// 封装后为 MsgProc_MyMsg(msg IMsg), 这个接口才能注册到服务器。
type Wrapper_${SERVICE_NAME} struct {
	proc *proc.Proc_${SERVICE_NAME}
}

// CloneAndRegisterMsgProcFunctions 克隆自身并注册消息处理函数.
func (w *Wrapper_${SERVICE_NAME}) CloneAndRegisterMsgProcFunctions(sess server.ISession) {
	assert.True(sess != nil, "session is nil")
	result := &Wrapper_${SERVICE_NAME}{
		proc: proc.NewProc_${SERVICE_NAME}(sess),
	}
	${REG_MSG_PROC_FUNCS}

	sess.AddOnClosed(result.proc.OnClosed)
}
`
