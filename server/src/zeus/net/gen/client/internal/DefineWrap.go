package internal

/*
替换字符
	${SERVICE_NAME}
	${INTERFACE_FUNCTIONS}
	${REGMSG_FUNCTIONS}
*/
const kTemplateWrap = `
package internal

// Code generated by gen. Do not edit!
// 代码由 gen 生成。不要手工编辑！

import (
	${S2C_MSG_IMPORTS}
	"zeus/net/client"

	assert "github.com/aurelien-rainone/assertgo"
)

type IProc_${SERVICE_NAME} interface {
	${INTERFACE_FUNCTIONS}
}

// Wrapper 是 Proc 的封装。
// Proc 由用户实现，其 MsgProc_MyMsg(msg *pb.MyMsg) 中的参数是具体的消息类。
// 封装后为 MsgProc_MyMsg(msg IMsg), 这个接口才能注册到服务器。
type Wrapper_${SERVICE_NAME} struct {
	proc IProc_${SERVICE_NAME}
}

func RegProc_${SERVICE_NAME}(sess _IRegMsgProcFunc, proc IProc_${SERVICE_NAME}) {
	assert.True(sess != nil, "session is nil")
	assert.True(proc != nil, "proc is nil")
	w := &Wrapper_${SERVICE_NAME}{
		proc: proc,
	}

	// [ServerToClient] 注册接收的消息。需要从ID创建消息。${REGMSG_FUNCTIONS}
}`
